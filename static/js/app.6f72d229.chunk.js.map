{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","updateText","setUpdateText","finished","onUpdating","list","setList","useEffect","a","async","getlist","getMode","AsyncStorage","getItem","mode","JSON","parse","saveItem","newList","setItem","stringify","console","log","updateTextInput","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","headerButton","color","inputContainer","TextInput","autoCorrect","returnKeyType","onChangeText","onSubmitEditing","Date","now","placeholder","value","input","ScrollView","listContainer","Object","keys","map","key","item","itemText","textDecorationLine","updateInput","defaultValue","submitUpdateItem","checkBox","Platform","OS","confirm","Alert","alert","finishedItem","Fontisto","name","size","updateItem","deleteItem","StyleSheet","create","flex","backgroundColor","paddingHorizontal","flexDirection","justifyContent","marginTop","fontWeight","fontSize","alignItems","marginBottom","paddingVertical","borderRadius","width","marginHorizontal","marginVertical","paddingLeft"],"mappings":"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","file":"static/js/app.6f72d229.chunk.js","sourcesContent":["export const theme = {\n  bg: \"black\",\n  bgWhite: \"white\",\n  gray: \"gray\",\n};\n","import { StatusBar } from \"expo-status-bar\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Alert,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  TouchableHighlight,\n  TextInput,\n  ScrollView,\n  Platform,\n} from \"react-native\";\nimport { Fontisto } from \"@expo/vector-icons\";\n\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { theme } from \"./color\";\n/*\n1. Loading 시 work / travel tap기억해서 띄어줄 것\n2. completed 아이콘 표시\n3. 유저가 text 수정하게 만들기\n*/\nexport default function App() {\n  const [working, setWorking] = useState(true);\n  const [text, setText] = useState(\"\");\n  const [updateText, setUpdateText] = useState(\"\");\n  const [finished, setFinished] = useState(false);\n  const [onUpdating, setOnUpdating] = useState(false);\n  const [list, setList] = useState({});\n  useEffect(async () => {\n    await getlist();\n    await getMode();\n  }, []);\n  const getMode = async () => {\n    try {\n      const mode = await AsyncStorage.getItem(\"@working\");\n      setWorking(JSON.parse(mode));\n    } catch (e) {}\n  };\n  const work = async () => {\n    setWorking(true);\n    try {\n      await AsyncStorage.setItem(\"@working\", JSON.stringify(true));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const travel = async () => {\n    setWorking(false);\n    try {\n      await AsyncStorage.setItem(\"@working\", JSON.stringify(false));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const changeInput = (text) => setText(text);\n  const saveItem = async (newList) => {\n    try {\n      await AsyncStorage.setItem(\"@list\", JSON.stringify(newList));\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const getlist = async () => {\n    try {\n      const list = await AsyncStorage.getItem(\"@list\");\n      if (list) {\n        setList(JSON.parse(list));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const addItem = async () => {\n    if (text === \"\") return;\n    const newList = {\n      ...list,\n      [Date.now()]: { text, working, finished, onUpdating },\n    };\n    setList(newList);\n    await saveItem(newList);\n    setText(\"\");\n  };\n  const deleteItem = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"삭제할거야?\");\n      if (ok) {\n        const newList = { ...list };\n        delete newList[key];\n        setList(newList);\n        await saveItem(newList);\n      }\n    } else {\n      Alert.alert(\"삭제할거야?\", \"진짜로?\", [\n        {\n          text: \"취소해!\",\n          onPress: async () => {\n            const newList = { ...list };\n            delete newList[key];\n            setList(newList);\n            await saveItem(newList);\n          },\n        },\n        { text: \"아니지?\" },\n      ]);\n    }\n  };\n\n  const finishedItem = async (key) => {\n    if (Platform.OS === \"web\") {\n      const ok = confirm(\"완료했나요?\");\n      if (ok) {\n        const newList = { ...list };\n        newList[key].finished = !newList[key].finished;\n        setList(newList);\n        await saveItem(newList);\n      }\n    } else {\n      Alert.alert(\"완료했나요?\", \"완성됐으면 확인을 눌러주세요\", [\n        {\n          text: \"완료\",\n          onPress: async () => {\n            const newList = { ...list };\n            newList[key].finished = !newList[key].finished;\n            setList(newList);\n            await saveItem(newList);\n          },\n        },\n        { text: \"미완료\" },\n      ]);\n    }\n  };\n  const updateItem = async (key) => {\n    const newList = { ...list };\n    if (newList[key].onUpdating === true) {\n      newList[key].onUpdating = false;\n      setList(newList);\n      await saveItem(newList);\n      return;\n    }\n\n    newList[key].onUpdating = true;\n    setList(newList);\n    await saveItem(newList);\n  };\n  const updateTextInput = (text) => {\n    setUpdateText(text);\n  };\n  const submitUpdateItem = async (key) => {\n    const newList = { ...list };\n    newList[key].text = updateText;\n    newList[key].onUpdating = false;\n    setList(newList);\n    await saveItem(newList);\n    setUpdateText(\"\");\n  };\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={work}>\n          <Text\n            style={{\n              ...styles.headerButton,\n              color: working ? \"white\" : theme.gray,\n            }}\n          >\n            Work\n          </Text>\n        </TouchableOpacity>\n        <TouchableOpacity onPress={travel}>\n          <Text\n            style={{\n              ...styles.headerButton,\n              color: !working ? \"white\" : theme.gray,\n            }}\n          >\n            Travel\n          </Text>\n        </TouchableOpacity>\n      </View>\n      <View style={styles.inputContainer}>\n        <TextInput\n          autoCorrect\n          returnKeyType=\"send\"\n          onChangeText={changeInput}\n          onSubmitEditing={addItem}\n          placeholder={\n            working ? \"오늘 할 일은 무엇인가요?\" : \"어디로 여행가나요?\"\n          }\n          value={text}\n          style={styles.input}\n        ></TextInput>\n      </View>\n      <ScrollView style={styles.listContainer}>\n        {Object.keys(list).map((key) =>\n          list[key].working === working ? (\n            <View style={styles.item} key={key}>\n              {list[key].onUpdating === false ? (\n                <Text\n                  style={\n                    list[key].finished\n                      ? {\n                          ...styles.itemText,\n                          textDecorationLine: \"line-through\",\n                          color: \"black\",\n                        }\n                      : styles.itemText\n                  }\n                >\n                  {list[key].text}\n                </Text>\n              ) : (\n                <TextInput\n                  style={styles.updateInput}\n                  defaultValue=\"asd\"\n                  onSubmitEditing={() => submitUpdateItem(key)}\n                  value={updateText}\n                  onChangeText={updateTextInput}\n                ></TextInput>\n              )}\n\n              <View style={styles.checkBox}>\n                <TouchableOpacity onPress={() => finishedItem(key)} alert>\n                  {list[key].finished === true ? (\n                    <Fontisto name=\"checkbox-active\" size={18} color=\"green\" />\n                  ) : (\n                    <Fontisto name=\"checkbox-passive\" size={18} color=\"white\" />\n                  )}\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => updateItem(key)} alert>\n                  <Fontisto name=\"eraser\" size={18} color=\"brown\" />\n                </TouchableOpacity>\n                <TouchableOpacity onPress={() => deleteItem(key)} alert>\n                  <Fontisto name=\"trash\" size={18} color=\"red\" />\n                </TouchableOpacity>\n              </View>\n            </View>\n          ) : null\n        )}\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  },\n  header: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 70,\n  },\n  headerButton: { color: \"white\", fontWeight: \"300\", fontSize: 25 },\n  inputContainer: {\n    alignItems: \"center\",\n    marginBottom: 40,\n  },\n  input: {\n    backgroundColor: theme.bgWhite,\n    paddingHorizontal: 30,\n    paddingVertical: 10,\n    borderRadius: 20,\n    width: \"80%\",\n    marginTop: 40,\n    fontSize: 15,\n  },\n  listContainer: {\n    marginHorizontal: 20,\n    marginVertical: 20,\n  },\n  item: {\n    backgroundColor: \"gray\",\n    paddingHorizontal: 30,\n    paddingVertical: 15,\n    marginBottom: 20,\n    borderRadius: 10,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  itemText: { fontSize: 15, fontWeight: \"700\", color: \"white\", flex: 0.7 },\n  checkBox: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    flex: 0.3,\n  },\n  updateInput: {\n    backgroundColor: \"white\",\n    flex: 0.6,\n    fontSize: 15,\n    borderRadius: 10,\n    color: \"black\",\n    paddingLeft: 10,\n  },\n});\n"],"sourceRoot":""}